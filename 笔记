
------------------toast组件的另一种封装方法
先创建

---------------------------------------------懒加载
安装npm
vue.use安装
使用把":src="替换成"v-lazy"

----------------------------封装思想
先把所需要的全部数据从各种地方封装到类里
然后再获取

--------------...的用法
...是把元素一个一个拿出来
const letters = [1,2,3,4,5,6,7]
console.log(...letters)//-> 1 2 3 4 5 6 7

------------------放抖动
// 封装放抖动
    debounce(func, delay) {
      let time = null;
      return (...arg) => {
        time && clearTimeout(time);
        time = setTimeout(() => {
          func.apply(this, arg);
        }, delay);
      };
    },
-------------------离开组件后不监听某个事件
如果只有一个事件的名字，以这个名字的事件全部都会取消掉
this.$off([事件名字],)


-----------------------------事件总线
发射事件
this.$bus.$emit
接收
this.$bus.$on

---------------mapGetters、mapActions映射
mapGetters
可以直接绑定app中的计算属性

再app中
imp {mapGetters}  vuex

computed:{
  ...mapGetters(["getter的名字"])
  // 或者这样写
  ...mapGetters{
    "自己命名":"getter的名字"
  }
}
mapActions同理

----------------------------mixin混入

// 是一个对象
// 
export const testMixin={
  mounted(){
    console.log("这是混入的打印")
  }
}
// 再app中
// 是一个数组可以放入多个
mixins:[testMixin]

-----------------------$nextTick
再app中 
mounted(){
  this.$nextTick({
    // 这里的内容会再vue渲染完成后执行
  })
}



-------------------------toast




--------------------->>>css穿透
如果想在当前界面的样式在组件里面生效就用>>>

---------------------数组方法
-------find
和filter功能一样
但是返回的是它本身对象改变返回的值原来的对象也会被改变
例如：
let cart=[{name:"name1"},{name:"name2"}];
undefined
cart.find(item => item.name == "name1").count=1;
1
cart
(2) [{…}, {…}]0: {name: "name1", count: 1}1: {name: "name2"}length: 2__proto__: Array(0)
cart.filter(item=>item.name=="name2").count=2;
2
cart
(2) [{…}, {…}]0: {name: "name1", count: 1}1: {name: "name2"}length: 2__proto__: Array(0)
cart.filter(item=>item.name=="name2")
[{…}]0: {name: "name2"}length: 1__proto__: Array(0)
cart.find(item => item.name == "name1")
{name: "name1", count: 1}





1、项目目录
common
一些公共的方法、变量、js文件

2、导入2个基础设置css文件


3、配置别名
vue.config.js




